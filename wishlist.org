* Marking multiple [7/7]
** DONE edit multiple variable names at once
** DONE edit multiple lines at once
** DONE rename html-tag
** DONE skip this occurence

** DONE renaming tags from end tag should work
** DONE mark-js-object-property-value failed { editableBy: customer } with cursor on m
** DONE contract js object should format object properly (without having to expand first)

* Editing ends of multiple lines
  ** could be: multiple cursors, running same command on several lines at once
* JavaScript tweaks [1/1]
** DONE js-move-line-up/down: fixes commas in object literals

* HTML-mode [3/3]
** DONE er/mark-inside-tag
** DONE er/mark-outside-tag
** DONE er/mark-attribute
* Dired [1/1]
** DONE Always update buffer
* js2-mode [0/2]
** TODO Don't show parsing error while editing.
*** could be: don't show in modified buffers
*** could be: don't show after point
*** could be: don't show until a certain time has passed
** TODO Jump to next error
* oppdrag-mode [0/2]
** TODO rename og delete filer --> ogs√• i target
** TODO ido-mode ignore target dir
* expand-region [/]
** mark object property also with quotes around key

* Fix undo-tree
Dear Damien and Magnar,

You both recently reported that undo-tree sometimes discards
history. I've encountered this occasionally myself, so the good news is
that I'm already dimly aware of the problem.

Unfortunately, I'm rather busy at the moment, so I haven't even had time
to figure out how to reproduce the bug reliably. That's going to be the
crucial step in debugging this. If one of you can figure out a precise
sequence of steps to reproduce it, that would go a very long way towards
solving it.

My first guess (and it's just a guess, as I haven't investigated) is that
there's a bug in the history discarding code, in
`undo-tree-discard-history' and `undo-tree-discard-node', which causes
too much of the tree to be discarded when the undo history size exceeds
the limits set by `undo-limit; et al.

The reasons I suspect the bug might be in the history-discarding code
are: (1) that's the only code that's ever supposed to remove history from
the tree, (2) that code path is executed far less frequently than the
rest, so gets less testing, (3) whilst a bug in the code that adds
history could conceivably destroy part of the tree, that code is
constantly in use in undo-tree-mode and seems to work fine, (4) my
impression is that the history-discarding bug occurs when I've been doing
a lot of typing in a specific buffer, and that's precisely the
circumstance when one would expect enough history to have accumulated to
trigger history-discarding.

If my guess is right, it should be possible to trigger the bug more
frequently by setting `undo-limit', `undo-strong-limit' and
`undo-outer-limit' to lower values, so that history is discarded
sooner. (Ideally, set them low enough to trigger discarding after few
buffer modifications, but not so low that no history gets stored at
all. You might need to play around a bit with different values. At a
guess, values around 100 would be about right.)

If you're happy debugging Elisp code (or if you want to learn!), then
once you've figured out how to reproduce the bug reliably, you could run
edebug on `undo-tree-discard-history' and `undo-tree-discard-node',
repeat the steps that trigger the bug, and see if the bug really is in
that code, or if it's somewhere else.

When I have some spare time, I'll definitely look into this anyway and
fix it, as it's a serious bug. But I'm unlikely to have time before the
end of the year.

All the best,

Toby

